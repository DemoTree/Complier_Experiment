digit 0
digit 1
digit 2
digit 3
digit 4
digit 5
digit 6
digit 7
digit 8
digit 9
letter a
letter b
letter c
letter d
letter e
letter f
letter g
letter h
letter i
letter j
letter k
letter l
letter m
letter n
letter o
letter p
letter q
letter r
letter s
letter t
letter u
letter v
letter w
letter x
letter y
letter z
letter A
letter B
letter C
letter D
letter E
letter F
letter G
letter H
letter I
letter J
letter K
letter L
letter M
letter N
letter O
letter P
letter Q
letter R
letter S
letter T
letter U
letter V
letter W
letter X
letter Y
letter Z
SEPARATOR ,
SEPARATOR :
SEPARATOR ;
SEPARATOR (
SEPARATOR )
SEPARATOR [
SEPARATOR ]
SEPARATOR {
SEPARATOR }
SEPARATOR "
SEPARATOR '
KEYWORD public
KEYWORD private
KEYWORD protected
KEYWORD static
KEYWORD abstract
KEYWORD final
KEYWORD class
KEYWORD extends
KEYWORD implements
KEYWORD interface
KEYWORD native
KEYWORD static
KEYWORD strictfp
KEYWORD synchronized
KEYWORD transient
KEYWORD new
KEYWORD main
KEYWORD Main
KEYWORD System
KEYWORD out
KEYWORD println
KEYWORD print
KEYWORD args
KEYWORD break
KEYWORD continue
KEYWORD return
KEYWORD do
KEYWORD while
KEYWORD if
KEYWORD else
KEYWORD for
KEYWORD instanceof
KEYWORD switch
KEYWORD case
KEYWORD default
KEYWORD try
KEYWORD catch
KEYWORD throw
KEYWORD throws
KEYWORD import
KEYWORD package
KEYWORD true
KEYWORD false
KEYWORD int
KEYWORD char
KEYWORD boolean
KEYWORD byte
KEYWORD double
KEYWORD float
KEYWORD long
KEYWORD short
KEYWORD null
KEYWORD true
KEYWORD false
KEYWORD String
KEYWORD string
KEYWORD super
KEYWORD this
KEYWORD void
KEYWORD goto
KEYWORD const
OPERATOR +
OPERATOR -
OPERATOR *
OPERATOR /
OPERATOR %
OPERATOR >
OPERATOR <
OPERATOR >=
OPERATOR <=
OPERATOR ==
OPERATOR !=
OPERATOR =
OPERATOR +=
OPERATOR -=
OPERATOR *=
OPERATOR /=
OPERATOR %=
OPERATOR >>=
OPERATOR <<=
OPERATOR &=
OPERATOR |=
OPERATOR ^=
OPERATOR &
OPERATOR |
OPERATOR ^
OPERATOR ~
OPERATOR &&
OPERATOR ||
OPERATOR >>
OPERATOR <<
OPERATOR !
OPERATOR ?
OPERATOR ++
OPERATOR --
OPERATOR .
OPERATOR ->
OPERATOR \
singleOperator +
singleOperator *
singleOperator % 
singleOperator >
singleOperator <
singleOperator =
singleOperator &
singleOperator |
singleOperator ^
singleOperator ~
singleOperator !
singleOperator ?
singleOperator .
ID letter(letter|digit)*
ERROR (digit)(digit)*(letter)(letter)*(digit|letter)*
INT (ε\|-)digit(digit)*
FLOAT (ε\|-)digit(digit)\*.digit(digit)*